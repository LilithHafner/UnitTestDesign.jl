
@ARTICLE{Arcuri2012-az,
  title    = "Random Testing: Theoretical Results and Practical Implications",
  author   = "Arcuri, A and Iqbal, M Z and Briand, L",
  abstract = "A substantial amount of work has shed light on whether random
              testing is actually a useful testing technique. Despite its
              simplicity, several successful real-world applications have been
              reported in the literature. Although it is not going to solve all
              possible testing problems, random testing appears to be an
              essential tool in the hands of software testers. In this paper,
              we review and analyze the debate about random testing. Its
              benefits and drawbacks are discussed. Novel results addressing
              general questions about random testing are also presented, such
              as how long does random testing need, on average, to achieve
              testing targets (e.g., coverage), how does it scale, and how
              likely is it to yield similar results if we rerun it on the same
              testing problem (predictability). Due to its simplicity that
              makes the mathematical analysis of random testing tractable, we
              provide precise and rigorous answers to these questions. Results
              show that there are practical situations in which random testing
              is a viable option. Our theorems are backed up by simulations and
              we show how they can be applied to most types of software and
              testing criteria. In light of these results, we then assess the
              validity of empirical analyzes reported in the literature and
              derive guidelines for both practitioners and scientists.",
  journal  = "IEEE Trans. Software Eng.",
  volume   =  38,
  number   =  2,
  pages    = "258--277",
  month    =  mar,
  year     =  2012,
  keywords = "program testing;software tools;random testing;software
              testing;software tool;mathematical analysis;partition
              testing;Testing;Software;Upper bound;Color;Random
              variables;Algorithm design and analysis;Generators;Coupon
              collector;random testing;theory;Schur
              function;predictability;partition testing;adaptive random
              testing."
}


@ARTICLE{Nie2011-yl,
  title     = "A survey of combinatorial testing",
  author    = "Nie, Changhai and Leung, Hareton",
  journal   = "ACM Computing Surveys (CSUR)",
  publisher = "ACM",
  volume    =  43,
  number    =  2,
  pages     = "11",
  month     =  jan,
  year      =  2011,
  keywords  = "Software testing; combinatorial testing (CT); covering array;
               test case generation"
}

@ARTICLE{Cohen1997-lb,
  title   = "The {AETG} System: An Approach to Testing Based on Combinatorial
             Design",
  author  = "Cohen, David M and Dalal, Siddhartha R and Fredman, Michael L and
             Patton, Gardner C",
  journal = "IEEE Transactions on Software Engineering",
  volume  =  23,
  number  =  7,
  pages   = "437--444",
  year    =  1997
}

@ARTICLE{Petke2015-ex,
  title    = "Practical Combinatorial Interaction Testing: Empirical Findings
              on Efficiency and Early Fault Detection",
  author   = "Petke, J and Cohen, M B and Harman, M and Yoo, S",
  abstract = "Combinatorial interaction testing (CIT) is important because it
              tests the interactions between the many features and parameters
              that make up the configuration space of software systems.
              Simulated Annealing (SA) and Greedy Algorithms have been widely
              used to find CIT test suites. From the literature, there is a
              widely-held belief that SA is slower, but produces more effective
              tests suites than Greedy and that SA cannot scale to higher
              strength coverage. We evaluated both algorithms on seven
              real-world subjects for the well-studied two-way up to the
              rarely-studied six-way interaction strengths. Our findings
              present evidence to challenge this current orthodoxy: real-world
              constraints allow SA to achieve higher strengths. Furthermore,
              there was no evidence that Greedy was less effective (in terms of
              time to fault revelation) compared to SA; the results for the
              greedy algorithm are actually slightly superior. However, the
              results are critically dependent on the approach adopted to
              constraint handling. Moreover, we have also evaluated a genetic
              algorithm for constrained CIT test suite generation. This is the
              first time strengths higher than 3 and constraint handling have
              been used to evaluate GA. Our results show that GA is competitive
              only for pairwise testing for subjects with a small number of
              constraints.",
  journal  = "IEEE Trans. Software Eng.",
  volume   =  41,
  number   =  9,
  pages    = "901--924",
  month    =  sep,
  year     =  2015,
  keywords = "genetic algorithms;greedy algorithms;program testing;simulated
              annealing;software fault tolerance;combinatorial interaction
              testing;early fault detection;software system configuration
              space;simulated annealing;SA;greedy algorithm;CIT test suite
              generation;constraint handling;pairwise testing;genetic
              algorithm;Testing;Simulated annealing;Genetic algorithms;Fault
              detection;Greedy algorithms;Turning;Flexible printed
              circuits;Combinatorial Interaction
              Testing;Prioritisation;Empirical Studies;Software
              Testing;Combinatorial interaction
              testing;prioritisation;empirical studies;software testing"
}

@ARTICLE{Richard_Kuhn2008-ut,
  title   = "Automated Combinatorial Test Methods---Beyond Pairwise Testing",
  author  = "Richard Kuhn, D and Kacker, Raghu and Lei, Yu",
  journal = "Crosstalk, The Journal of Defense Software Engineering",
  volume  =  21,
  number  =  6,
  pages   = "22--26",
  year    =  2008
}

@ARTICLE{He2013-th,
  title     = "Strong orthogonal arrays and associated Latin hypercubes for
               computer experiments",
  author    = "He, Yuanzhen and Tang, Boxin",
  abstract  = "[This paper introduces, constructs and studies a new class of
               arrays, called strong orthogonal arrays, as suitable designs for
               computer experiments. A strong orthogonal array of strength t
               enjoys better spacefilling properties than a comparable
               orthogonal array in all dimensions lower than t while retaining
               the space-filling properties of the latter in t dimensions.
               Latin hypercubes based on strong orthogonal arrays of strength t
               are more space-filling than comparable orthogonal array-based
               Latin hypercubes in all g dimensions for any 2$\leq$ g $\leq$ t
               --- 1.]",
  journal   = "Biometrika",
  publisher = "[Oxford University Press, Biometrika Trust]",
  volume    =  100,
  number    =  1,
  pages     = "254--260",
  year      =  2013
}

@INPROCEEDINGS{Cohen2003-pg,
  title     = "Constructing Test Suites for Interaction Testing",
  booktitle = "Proceedings of the 25th International Conference on Software
               Engineering",
  author    = "Cohen, Myra B and Gibbons, Peter B and Mugridge, Warwick B and
               Colbourn, Charles J",
  publisher = "IEEE Computer Society",
  pages     = "38--48",
  series    = "ICSE '03",
  year      =  2003,
  address   = "Washington, DC, USA",
  location  = "Portland, Oregon"
}

@inproceedings{chowdhary2009practicing,
  title={Practicing testability in the real world},
  author={Chowdhary, Vishal},
  booktitle={2009 International Conference on Software Testing Verification and Validation},
  pages={260--268},
  year={2009},
  organization={IEEE},
  doi={10.1109/ICST.2009.53}
}

@ARTICLE{Segura2016-qh,
  title    = "A Survey on Metamorphic Testing",
  author   = "Segura, S and Fraser, G and Sanchez, A B and Ruiz-Cort{\'e}s, A",
  abstract = "A test oracle determines whether a test execution reveals a
              fault, often by comparing the observed program output to the
              expected output. This is not always practical, for example when a
              program's input-output relation is complex and difficult to
              capture formally. Metamorphic testing provides an alternative,
              where correctness is not determined by checking an individual
              concrete output, but by applying a transformation to a test input
              and observing how the program output ``morphs'' into a different
              one as a result. Since the introduction of such metamorphic
              relations in 1998, many contributions on metamorphic testing have
              been made, and the technique has seen successful applications in
              a variety of domains, ranging from web services to computer
              graphics. This article provides a comprehensive survey on
              metamorphic testing: It summarises the research results and
              application areas, and analyses common practice in empirical
              studies of metamorphic testing as well as the main open
              challenges.",
  journal  = "IEEE Trans. Software Eng.",
  volume   =  42,
  number   =  9,
  pages    = "805--824",
  month    =  sep,
  year     =  2016,
  keywords = "program testing;metamorphic testing;test oracle;test
              execution;metamorphic relations;Testing;Search
              engines;Google;Libraries;Concrete;Distance measurement;Web
              services;Metamorphic testing;oracle problem;survey"
}

@ARTICLE{Lei2008-xt,
  title    = "{IPOG/IPOG-D}: efficient test generation for multi-way
              combinatorial testing",
  author   = "Lei, Yu and Kacker, Raghu and Kuhn, D Richard and Okun, Vadim and
              Lawrence, James",
  abstract = "Abstract This paper presents two strategies for multi-way testing
              (i.e. t-way testing with t>2). The first strategy generalizes an
              existing strategy, called in-parameter-order, from pairwise
              testing to multi-way testing. This strategy requires all
              multi-way combinations to be explicitly enumerated. When the
              number of multi-way combinations is large, however, explicit
              enumeration can be prohibitive in terms of both the space for
              storing these combinations and the time needed to enumerate them.
              To alleviate this problem, the second strategy combines the first
              strategy with a recursive construction procedure to reduce the
              number of multi-way combinations that have to be enumerated. Both
              strategies are deterministic, i.e. they always produce the same
              test set for the same system configuration. This paper reports a
              multi-way testing tool called FireEye, and provides an analytic
              and experimental evaluation of the two strategies. Copyright ?
              2007 John Wiley \& Sons, Ltd.",
  journal  = "Softw. Test. Verif. Reliab.",
  volume   =  18,
  number   =  3,
  pages    = "125--148",
  month    =  sep,
  year     =  2008
}

@ARTICLE{King1976-jt,
  title   = "Symbolic execution and program testing",
  author  = "King, James C",
  journal = "Communications of the ACM",
  volume  =  19,
  number  =  7,
  pages   = "385--394",
  year    =  1976
}

@INPROCEEDINGS{Torres-Jimenez2013-kk,
  title     = "Survey of Covering Arrays",
  booktitle = "2013 15th International Symposium on Symbolic and Numeric
               Algorithms for Scientific Computing",
  author    = "Torres-Jimenez, J and Izquierdo-Marquez, I",
  abstract  = "Covering Arrays(CA) are combinatorial objects that have been
               used succesfully to automate the generation of test cases for
               software testing. The CAs have the features of being of minimal
               cardinality (i.e. minimize the number of test cases), and
               maximum coverage (i.e. they guarantee to cover all combinations
               of certain size between the input parameters). Only in few cases
               there is known an optimal solution to construct CAs, but in
               general the problem of constructing optimal CAs is a hard
               combinatorial optimization problem. For this reason, a number of
               methods to solve the construction of covering arrays have been
               developed. This paper gives a survey of the state of the art of
               the methods to construct covering arrays. The methods analyzed
               were grouped in four categories: exact methods (Section II),
               greedy methods (Section III), metaheuristic methods (Section
               IV), and algebraic methods (Section V). The paper ends with a
               summary of the methods analyzed.",
  pages     = "20--27",
  month     =  sep,
  year      =  2013,
  keywords  = "arrays;automatic test pattern generation;combinatorial
               mathematics;greedy algorithms;program testing;covering
               arrays;combinatorial objects;automatic test case
               generation;software testing;minimal cardinality;optimal CAs;hard
               combinatorial optimization problem;exact methods;greedy
               methods;metaheuristic methods;algebraic
               methods;Encoding;Generators;Simulated annealing;Markov
               processes;Genetic algorithms;Metals;covering arrays; methods to
               construct covering arrays"
}

@INPROCEEDINGS{Inozemtseva2014-gz,
  title     = "Coverage is not strongly correlated with test suite
               effectiveness",
  booktitle = "Proceedings of the 36th International Conference on Software
               Engineering",
  author    = "Inozemtseva, Laura and Holmes, Reid",
  abstract  = "The coverage of a test suite is often used as a proxy for its
               ability to detect faults. However, previous studies that
               investigated the correlation between code coverage and test
               suite effectiveness have failed to reach a consensus about the
               nature and strength of the relationship between these test suite
               characteristics. Moreover, many of the studies were done with
               small or synthetic programs, making it unclear whether their
               results generalize to larger programs, and some of the studies
               did not account for the confounding influence of test suite
               size. In addition, most of the studies were done with adequate
               suites, which are are rare in practice, so the results may not
               generalize to typical test suites. We have extended these
               studies by evaluating the relationship between test suite size,
               coverage, and effectiveness for large Java programs. Our study
               is the largest to date in the literature: we generated 31,000
               test suites for five systems consisting of up to 724,000 lines
               of source code. We measured the statement coverage, decision
               coverage, and modified condition coverage of these suites and
               used mutation testing to evaluate their fault detection
               effectiveness. We found that there is a low to moderate
               correlation between coverage and effectiveness when the number
               of test cases in the suite is controlled for. In addition, we
               found that stronger forms of coverage do not provide greater
               insight into the effectiveness of the suite. Our results suggest
               that coverage, while useful for identifying under-tested parts
               of a program, should not be used as a quality target because it
               is not a good indicator of test suite effectiveness.",
  pages     = "435--445",
  series    = "ICSE 2014",
  month     =  may,
  year      =  2014,
  address   = "New York, NY, USA",
  keywords  = "test suite effectiveness, Coverage, test suite quality",
  location  = "Hyderabad, India"
}

@MISC{Cai2005-ex,
  title   = "The effect of code coverage on fault detection under different
             testing profiles",
  author  = "Cai, Xia and Lyu, Michael R",
  journal = "Proceedings of the first international workshop on Advances in
             model-based testing - A-MOST '05",
  year    =  2005
}

@ARTICLE{Calvagna2012-ic,
  title    = "T-wise combinatorial interaction test suites construction based
              on coverage inheritance: combinatorial test suites by coverage inheritance",
  author   = "Calvagna, Andrea and Gargantini, Angelo",
  abstract = "SUMMARY Combinatorial interaction testing (CIT) is a testing
              technique that requires covering all t-sized tuples of values out
              of n parameter attributes or properties modelled after the input
              parameters or the configuration domain of a system under test.
              CIT test suites have shown to be very effective in software
              testing already at pairwise (t ?=? 2) level, and the
              effectiveness of CIT grows with the tuple width t. Unfortunately,
              the number of tuples to be tested also does grow. In order to
              reduce the testing effort, researchers addressed the issue of
              computing minimal-sized CIT test suites with effective and
              scalable algorithms. However, still very few generally applicable
              t-wise covering construction algorithms (and tools) do exist in
              literature. This paper presents an original greedy algorithm to
              compute t-wise covering mixed covering arrays with constant space
              complexity, irrespective of the number of involved parameters and
              strength of interaction. The proposed algorithm has been
              implemented in a prototype tool, featuring also support for user
              constraints over the inputs. Assessment of the tool performance
              on a set of large, real-world test systems is reported, with
              results encouraging its adoption in industrial production
              environments. Copyright ? 2011 John Wiley \& Sons, Ltd.",
  journal  = "Softw. Test. Verif. Reliab.",
  volume   =  22,
  number   =  7,
  pages    = "507--526",
  series   = "Lecture Notes in Computer Science",
  month    =  nov,
  year     =  2012
}

@ARTICLE{Koc2018-vs,
  title    = "Approaches for computing test-case-aware covering arrays",
  author   = "Koc, Ugur and Yilmaz, Cemal",
  abstract = "Summary Test-case-aware covering arrays have been recently
              introduced to overcome the shortcomings of standard covering
              arrays, which prevent some combinations of option settings from
              being exercised in the presence of test-case-specific
              constraints. A number of proof-of-concept approaches for
              computing test-case-aware covering arrays have also been
              presented in the aforementioned work. The main concern in the
              development of these approaches was neither their efficiency nor
              their effectiveness, but their correctness. On the other hand,
              efficient and effective ways of computing test-case-aware
              covering arrays are of great practical importance. To improve the
              applicability of test-case-aware covering arrays in practice,
              this work presents a number of efficient and effective approaches
              for computing them. Furthermore, the proposed approaches are
              evaluated by conducting a set of experiments on widely-used
              highly-configurable software systems and comparing their
              efficiency and effectiveness to those of the existing approaches
              in various practical testing scenarios.",
  journal  = "Softw. Test. Verif. Reliab.",
  volume   =  28,
  pages    = "e1689",
  month    =  nov,
  year     =  2018
}

@ARTICLE{Wiklund2017-ms,
  title    = "Impediments for software test automation: A systematic literature
              review",
  author   = "Wiklund, Kristian and Eldh, Sigrid and Sundmark, Daniel and
              Lundqvist, Kristina",
  abstract = "Summary Automated software testing is a critical enabler for
              modern software development, where rapid feedback on the product
              quality is expected. To make the testing work well, it is of high
              importance that impediments related to test automation are
              prevented and removed quickly. An enabling factor for all types
              of improvement is to understand the nature of what is to be
              improved. We have performed a systematic literature review of
              reported impediments related to software test automation to
              contribute to this understanding. In this paper, we present the
              results from the systematic literature review: The list of
              identified publications, a categorization of identified
              impediments, and a qualitative discussion of the impediments
              proposing a socio-technical system model of the use and
              implementation of test automation.",
  journal  = "Softw. Test. Verif. Reliab.",
  volume   =  27,
  number   =  8,
  pages    = "e1639",
  month    =  dec,
  year     =  2017
}

@ARTICLE{Grindal2005-su,
  title    = "Combination testing strategies: a survey",
  author   = "Grindal, Mats and Offutt, Jeff and Andler, Sten F",
  abstract = "Abstract Combination strategies are test case selection methods
              that identify test cases by combining values of the different
              test object input parameters based on some combinatorial
              strategy. This survey presents 16 different combination
              strategies, covering more than 40 papers that focus on one or
              several combination strategies. This collection represents most
              of the existing work performed on combination strategies. This
              survey describes the basic algorithms used by the combination
              strategies. Some properties of combination strategies, including
              coverage criteria and theoretical bounds on the size of test
              suites, are also included in this description. This survey paper
              also includes a subsumption hierarchy that attempts to relate the
              various coverage criteria associated with the identified
              combination strategies. Copyright ? 2005 John Wiley \& Sons, Ltd.",
  journal  = "Softw. Test. Verif. Reliab.",
  volume   =  15,
  number   =  3,
  pages    = "167--199",
  series   = "Lecture Notes",
  month    =  sep,
  year     =  2005
}

@TECHREPORT{Grindal2006-vy,
  title       = "Handling Constraints in the Input Space when Using Combination
                 Strategies for Software Testing",
  author      = "Grindal, Mats and Offutt, Jeff and Mellin, Jonas",
  number      = "HS-IKI-TR-06-001",
  institution = {School of Humanities and Informatics, University of
                 Sk\"ovde},
  year        =  2006
}

@TECHREPORT{Kuhn2010-ak,
  title       = "Practical combinatorial testing",
  author      = "Kuhn, D R and Kacker, R N and Lei, Y",
  number      = "800-142",
  institution = "National Institute of Standards and Technology, U.S.~Department of Commerce",
  year        =  2010
}


@INCOLLECTION{Lampropoulos2020-sd,
  title     = "Luck: A Probabilistic Language for Testing",
  booktitle = "Foundations of Probabilistic Programming",
  author    = "Lampropoulos, Leonidas and Pierce, Benjamin C and Xia, Li-Yao
               and Gallois-Wong, Diane and Hri\c{t}cu, C\u{a}t\u{a}lin and Hughes, John",
  editor    = "Barthe, Gilles and Katoen, Joost-Pieter and Silva, Alexandra",
  pages     = "449--487",
  year      =  2020
}

@INPROCEEDINGS{Wang2018-xh,
  title           = "Towards Optimal Concolic Testing",
  booktitle       = "2018 {ACM/IEEE} 40th International Conference on Software
                     Engineering",
  author          = "Wang, Xinyu and Zhenbang, Sun and Jun, Chen and Zhang,
                     Peixin and Wang, Jingyi and Lin, Yun",
  pages           = "291--302",
  year            =  2018,
  address         = "New York, NY, USA",
  conference      = "ICSE '18: 40th International Conference on Software
                     Engineering",
  location        = "Gothenburg Sweden"
}


@INPROCEEDINGS{Segall2011-jv,
  title     = "Using binary decision diagrams for combinatorial test design",
  booktitle = "Proceedings of the 2011 International Symposium on Software
               Testing and Analysis",
  author    = "Segall, Itai and Tzoref-Brill, Rachel and Farchi, Eitan",
  pages     = "254--264",
  year      =  2011
}

@ARTICLE{Sha2001-ie,
  title   = "Using simplicity to control complexity",
  author  = "Sha, Lui",
  journal = "IEEE Softw.",
  volume  =  18,
  number  =  4,
  pages   = "20--28",
  year    =  2001
}

@INPROCEEDINGS{Czerwonka2006-hm,
  title     = "Pairwise Testing in Real World: Practical extensions to test
               case generators",
  booktitle = "24th Pacific Northwest Software Quality Conference",
  author    = "Czerwonka, Jacek",
  volume    = 200,
  year      = 2006
}
@inproceedings{loscher2018automating,
  title={Automating targeted property-based testing},
  author={L{\"o}scher, Andreas and Sagonas, Konstantinos},
  booktitle={2018 IEEE 11th International Conference on Software Testing, Verification and Validation (ICST)},
  pages={70--80},
  year={2018}
}

@misc{vira2019,
  author = {Churavy, Valentin},
  title = {ConcolicFuzzer},
  year = {2019},
  publisher = {Github},
  journal = {GitHub repository},
	howpublished = {\url{https://github.com/vchuravy/ConcolicFuzzer.jl}}
}

@misc{pairwise-website,
  author = {Czerwonka, Jacek},
  title = "Pairwise Testing: Combinatorial Test Case Generation",
  year = {2021},
  howpublished = {\url{https://jaccz.github.io/pairwise/}}
}